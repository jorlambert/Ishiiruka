name: PR Builds x64

on:
  push:
    branches:
        - Dev
    paths-ignore:
        - "**.md"
        - "**.ini"
  pull_request:
    branches: [ Dev ]
    paths-ignore:
      - "**.md"
      - "**.ini"

jobs:
  windows:
    strategy:
      fail-fast: false
      matrix:
        include:
          - artifact_name: windows
    env:
      DXSDK_DIR: "C:\\Program Files (x86)\\Microsoft DirectX SDK (June 2010)\\"
    name: "Windows Dolphin"
    runs-on: windows-2019
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2.3.1
      - name: "Remove Redistributable"
        shell: cmd
        run: |
          MsiExec.exe /passive /X{F0C3E5D1-1ADE-321E-8167-68EF0DE699A5}
          MsiExec.exe /passive /X{1D8E6291-B0D5-35EC-8441-6616F567A0F7}
          mkdir .\Tools\DX
      - name: "Setup MSBuild"
        uses: microsoft/setup-msbuild@v1
      - name: Cache DXSDK_Jun10.exe
        uses: actions/cache@v2
        with:
          path: ./Tools/DX/
          key: ${{ runner.os }}
      - name: "Download DirectX SDK"
        working-directory: ${{ github.workspace }}
        shell: powershell
        run: |
          if (!(Test-Path ".\Tools\DX\DXSDK_Jun10.exe" -PathType Leaf)) { Invoke-WebRequest -Uri https://github.com/project-slippi/Ishiiruka/releases/download/v2.2.5/DXSDK_Jun10.exe -UseBasicParsing -OutFile ".\Tools\DX\DXSDK_Jun10.exe" }
      - name: "Install DirectX SDK"
        working-directory: ${{ github.workspace }}
        shell: cmd
        run: |
          .\Tools\DX\DXSDK_Jun10.exe /U /F
      - name: 'Fetch Git Tags'
        shell: bash
        if: success()
        run: |
          git fetch --prune --unshallow
          echo "GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          echo "GIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
          echo "CURR_DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV
      - name: "Build Dolphin"
        shell: cmd
        run: |
          msbuild /p:Configuration=Release /p:Platform=x64 ${{ github.workspace }}\Source\Dolphin.sln
      - name: Setup Nuget.exe
        uses: nuget/setup-nuget@v1
        with:
          nuget-version: '5.x'
      - name: "Build Updater"
        working-directory: ${{ github.workspace }}
        shell: cmd
        run: |
          git clone https://github.com/Birdthulu/FPM-Win-Updater
          cd FPM-Win-Updater
          nuget restore ${{ github.workspace }}\FPM-Win-Updater\DolphinUpdater.sln
          msbuild /p:Configuration=Release /p:Platform="Any CPU" ${{ github.workspace }}\FPM-Win-Updater\DolphinUpdater.sln
          cd DolphinUpdater\bin\Release
          copy /b /v /y Updater.exe ${{ github.workspace }}\Binary\x64\
      - name: "Build Replay Manager"
        working-directory: ${{ github.workspace }}
        shell: cmd
        run: |
          git clone https://github.com/Birdthulu/Dolphin-Replay-Manager
          cd Dolphin-Replay-Manager
          msbuild /p:Configuration=Release /p:Platform="Any CPU" "${{ github.workspace }}\Dolphin-Replay-Manager\Bird's Replay Manager.sln"
          cd "Bird's Replay Manager\bin\Release"
          copy /b /v /y "Bird's Replay Manager.exe" ${{ github.workspace }}\Binary\x64\
      - name: "Prepare Artifact"
        working-directory: ${{ github.workspace }}
        run: |
          cd .\Binary\x64\
      - name: Package Artifact
        working-directory: ${{ github.workspace }}
        run: |
          $FILE_NAME="${{ matrix.artifact_name }}.zip"
          mkdir artifact
          cd .\Binary\x64\
          fsutil file createnew portable.txt 0
          7z a $FILE_NAME .\*
          move $FILE_NAME ..\..\artifact\
      - name: "Publish"
        if: success()
        uses: actions/upload-artifact@v2-preview
        with:
          name: ${{ matrix.artifact_name }}
          path: "./artifact/"