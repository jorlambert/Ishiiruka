name: PR Builds x64

on:
  push:
    branches:
        - Dev
    paths-ignore:
        - "**.md"
        - "**.ini"
  pull_request:
    branches: [ Dev ]
    paths-ignore:
      - "**.md"
      - "**.ini"

jobs:
  ubuntu64-netplay:
      name: "Ubuntu Netplay"
      runs-on: ubuntu-18.04
      steps:
        - name: "Checkout"
          uses: actions/checkout@v2
          with:
            submodules: recursive
        - name: 'Fetch Git Tags'
          if: success()
          run: |
            git fetch --prune --unshallow
            echo "GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
            echo "GIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
            echo "GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
            echo "CURR_DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV
        - name: "Install prerequisites"
          if: success()
          shell: bash
          run: |
            sudo dpkg --add-architecture amd64
            sudo apt update
            sudo apt install \
            cmake \
            pkg-config \
            ca-certificates \
            gcc \
            g++ \
            git \
            libxxf86vm-dev \
            libavcodec-dev \
            libavformat-dev \
            libavutil-dev \
            libswscale-dev \
            libxi-dev \
            libxrandr-dev \
            libudev-dev \
            libevdev-dev \
            libsfml-dev \
            libminiupnpc-dev \
            libmbedtls-dev \
            libcurl4-openssl-dev \
            libhidapi-dev \
            libsystemd-dev \
            libbluetooth-dev \
            libasound2-dev \
            libpulse-dev \
            libpugixml-dev \
            libbz2-dev \
            libzstd-dev \
            liblzo2-dev \
            libpng-dev \
            libusb-1.0-0-dev gettext \
            libxmu-dev \
            libpango1.0-dev
        - name: "Build Netplay Dolphin"
          if: success()
          working-directory: ${{ github.workspace }}
          run: |
            ./build-linux.sh
        - name: "Build Netplay AppImage"
          if: success()
          working-directory: ${{ github.workspace }}
          run: |
            ./build-appimage.sh
        - name: "Package Netplay"
          if: success()
          working-directory: ${{ github.workspace }}
          run: |
            mkdir artifact
            FILE_NAME=${{ env.CURR_DATE }}-${{ env.GIT_HASH }}-${{ env.GIT_TAG }}-linux-appimage-netplay.zip
            zip -r "${FILE_NAME}" ./*.AppImage*
            mv "${FILE_NAME}" ./artifact/
        - name: "Publish"
          if: success()
          uses: actions/upload-artifact@v2-preview
          with:
            name: "linux-netplay"
            path: "./artifact/"